---
interface Props {
	hex: string,
	dark?: boolean,
}
const { hex, dark = false } = Astro.props

import { themeFromSourceColor, argbFromHex, hexFromArgb } from "@material/material-color-utilities"

const theme = themeFromSourceColor(argbFromHex(hex))

const primary = theme.palettes.primary
const secondary = theme.palettes.secondary
const tertiary = theme.palettes.tertiary
const neutral = theme.palettes.neutral
const neutralVariant = theme.palettes.neutralVariant
const error = theme.palettes.error

const mdPrimary = hexFromArgb(primary.getHct(dark ? 80 : 40).toInt())
const mdOnPrimary = hexFromArgb(primary.getHct(dark ? 20 : 100).toInt())
const mdOnPrimaryContainer = hexFromArgb(primary.getHct(dark ? 90 : 30).toInt())
const mdPrimaryContainer = hexFromArgb(primary.getHct(dark ? 30 : 90).toInt())
const mdInversePrimary = hexFromArgb(primary.getHct(dark ? 40 : 80).toInt())

const mdSecondary = hexFromArgb(secondary.getHct(dark ? 80 : 40).toInt())
const mdOnSecondary = hexFromArgb(secondary.getHct(dark ? 20 : 100).toInt())
const mdOnSecondaryContainer = hexFromArgb(secondary.getHct(dark ? 90 : 30).toInt())
const mdSecondaryContainer = hexFromArgb(secondary.getHct(dark ? 30 : 90).toInt())

const mdTertiary = hexFromArgb(tertiary.getHct(dark ? 80 : 40).toInt())
const mdOnTertiary = hexFromArgb(tertiary.getHct(dark ? 20 : 100).toInt())
const mdOnTertiaryContainer = hexFromArgb(tertiary.getHct(dark ? 90 : 30).toInt())
const mdTertiaryContainer = hexFromArgb(tertiary.getHct(dark ? 30 : 90).toInt())

const mdError = hexFromArgb(error.getHct(dark ? 80 : 40).toInt())
const mdOnError = hexFromArgb(error.getHct(dark ? 20 : 100).toInt())
const mdOnErrorContainer = hexFromArgb(error.getHct(dark ? 90 : 30).toInt())
const mdErrorContainer = hexFromArgb(error.getHct(dark ? 30 : 90).toInt())

const mdSurface = hexFromArgb(neutral.getHct(dark ? 6 : 98).toInt())
const mdOnSurface = hexFromArgb(neutral.getHct(dark ? 90 : 10).toInt())
const mdSurfaceVariant = hexFromArgb(neutralVariant.getHct(dark ? 30 : 90).toInt())
const mdOnSurfaceVariant = hexFromArgb(neutralVariant.getHct(dark ? 80 : 30).toInt())
const mdSurfaceContainerHighest = hexFromArgb(neutral.getHct(dark ? 22 : 90).toInt())
const mdSurfaceContainerHigh = hexFromArgb(neutral.getHct(dark ? 17 : 92).toInt())
const mdSurfaceContainer = hexFromArgb(neutral.getHct(dark ? 12 : 94).toInt())
const mdSurfaceContainerLow = hexFromArgb(neutral.getHct(dark ? 10 : 96).toInt())
const mdSurfaceContainerLowest = hexFromArgb(neutral.getHct(dark ? 4 : 100).toInt())
const mdInverseSurface = hexFromArgb(neutral.getHct(dark ? 90 : 20).toInt())
const mdInverseOnSurface = hexFromArgb(neutral.getHct(dark ? 20 : 95).toInt())
const mdSurfaceTint = `${hexFromArgb(primary.getHct(dark ? 80 : 40).toInt())}0C`

const mdOutline = hexFromArgb(neutralVariant.getHct(dark ? 60 : 50).toInt())
const mdOutlineVariant = hexFromArgb(neutralVariant.getHct(dark ? 30 : 80).toInt())

const styles = `
	:root {
        --md-color-primary: ${mdPrimary};
        --md-color-on-primary: ${mdOnPrimary};
        --md-color-primary-container: ${mdPrimaryContainer};
        --md-color-on-primary-container: ${mdOnPrimaryContainer};
        --md-color-inverse-primary: ${mdInversePrimary};
        --md-color-secondary: ${mdSecondary};
        --md-color-on-secondary: ${mdOnSecondary};
        --md-color-secondary-container: ${mdSecondaryContainer};
        --md-color-on-secondary-container: ${mdOnSecondaryContainer};
        --md-color-tertiary: ${mdTertiary};
        --md-color-on-tertiary: ${mdOnTertiary};
        --md-color-tertiary-container: ${mdTertiaryContainer};
        --md-color-on-tertiary-container: ${mdOnTertiaryContainer};
        --md-color-error: ${mdError};
        --md-color-on-error: ${mdOnError};
        --md-color-error-container: ${mdErrorContainer};
        --md-color-on-error-container: ${mdOnErrorContainer};
        --md-color-surface: ${mdSurface};
        --md-color-on-surface: ${mdOnSurface};
        --md-color-surface-variant: ${mdSurfaceVariant};
        --md-color-on-surface-variant: ${mdOnSurfaceVariant};
        --md-color-surface-container-highest: ${mdSurfaceContainerHighest};
        --md-color-surface-container-high: ${mdSurfaceContainerHigh};
        --md-color-surface-container: ${mdSurfaceContainer};
        --md-color-surface-container-low: ${mdSurfaceContainerLow};
        --md-color-surface-container-lowest: ${mdSurfaceContainerLowest};
        --md-color-inverse-surface: ${mdInverseSurface};
        --md-color-inverse-on-surface: ${mdInverseOnSurface};
        --md-color-surface-tint: ${mdSurfaceTint};
        --md-color-outline: ${mdOutline};
        --md-color-outline-variant: ${mdOutlineVariant};
    }
`
---

<style is:global set:html={styles}></style>

<style is:global>
    @font-face {
        font-family: 'Roboto Flex';
        font-style: normal;
        font-weight: 100 1000;
        font-stretch: 100%;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/robotoflex/v26/NaNNepOXO_NexZs0b5QrzlOHb8wCikXpYqmZsWI-__OGbt8jZktqc2V3Zs0KvDLdBP8SBZtOs2IifRuUZQMsPJtUsR4DEK6cULNeUx9XgTnH37Ha_FIAp4Fm0PP1hw45DntW2x0wZGzhPmr1YNMYKYn9_1IQXGwJAiUJVUMdN5YUW4O8HtSoXjC79QRyaLshNDUf3e0O-gn5rrZCu20YNau4OPE.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
    }

	.md-elevation-5 {
		box-shadow: rgba(0, 0, 0, 0.1) 0 8px 12px 6px;
	}

    .md-elevation-4 {
        box-shadow: rgba(0, 0, 0, 0.15) 0 6px 8px 4px;
    }

    .md-elevation-3 {
        box-shadow: rgba(0, 0, 0, 0.2) 0 4.5px 6px 3px;
    }

    .md-elevation-2 {
        box-shadow: rgba(0, 0, 0, 0.25) 0 2.25px 3px 1.5px;
    }

    .md-elevation-1 {
        box-shadow: rgba(0, 0, 0, 0.3) 0 0.75px 1px 0.5px;
    }

	.md-motion-easing-emphasized {
		transition-timing-function: cubic-bezier(0.2, 0, 0, 1);
	}

	.md-motion-easing-emphasized-accelerate {
		transition-timing-function: cubic-bezier(0.3, 0, 0.8, 0.15);
	}

	.md-motion-easing-emphasized-decelerate {
		transition-timing-function: cubic-bezier(0.05, 0.7, 0.1, 1);
	}

	.md-motion-easing-standard {
		transition-timing-function: cubic-bezier(0.2, 0, 0, 1);
	}

	.md-motion-easing-standard-accelerate {
		transition-timing-function: cubic-bezier(0.3, 0, 1, 1);
	}

	.md-motion-easing-standard-decelerate {
		transition-timing-function: cubic-bezier(0, 0, 0, 1);
	}

	.md-motion-easing-legacy {
		transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
	}

	.md-motion-easing-legacy-accelerate {
		transition-timing-function: cubic-bezier(0.4, 0, 1, 1);
	}

    .md-motion-easing-legacy-decelerate {
        transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
    }

	.md-motion-easing-linear {
		transition-timing-function: linear;
	}

	.md-motion-duration-short1 {
		transition-duration: 50ms;
	}

    .md-motion-duration-short2 {
        transition-duration: 100ms;
    }

	.md-motion-duration-short3 {
		transition-duration: 150ms;
	}

	.md-motion-duration-short4 {
		transition-duration: 200ms;
	}

	.md-motion-duration-medium1 {
		transition-duration: 250ms;
	}

    .md-motion-duration-medium2 {
        transition-duration: 300ms;
    }

    .md-motion-duration-medium3 {
        transition-duration: 350ms;
    }

    .md-motion-duration-medium4 {
        transition-duration: 400ms;
    }

    .md-motion-duration-long1 {
        transition-duration: 450ms;
    }

    .md-motion-duration-long2 {
        transition-duration: 500ms;
    }

    .md-motion-duration-long3 {
        transition-duration: 550ms;
    }

    .md-motion-duration-long4 {
        transition-duration: 600ms;
    }

    .md-motion-duration-extra-long1 {
        transition-duration: 700ms;
    }

    .md-motion-duration-extra-long2 {
        transition-duration: 800ms;
    }

    .md-motion-duration-extra-long3 {
        transition-duration: 900ms;
    }

    .md-motion-duration-extra-long4 {
        transition-duration: 1s;
    }

	.md-shape-corner-full {
		border-radius: 100vh;
	}

    .md-shape-corner-extra-large-top {
        border-radius: 28px 28px 0 0;
    }

    .md-shape-corner-extra-large {
        border-radius: 28px;
    }

    .md-shape-corner-large-top {
        border-radius: 16px 0;
    }

    .md-shape-corner-large-end {
        border-radius: 0 16px 16px 0;
    }

    .md-shape-corner-large-start {
        border-radius: 16px 0 0 16px;
    }

    .md-shape-corner-large {
        border-radius: 16px;
    }

    .md-shape-corner-medium {
        border-radius: 12px;
    }

    .md-shape-corner-small {
        border-radius: 8px;
    }

    .md-shape-corner-extra-small-top {
        border-radius: 4px 4px 0 0;
    }

    .md-shape-corner-extra-small {
        border-radius: 4px;
    }

    .md-shape-corner-none {
        border-radius: 0;
    }

	.md-typescale-display-large {
        font-family: "Roboto Flex", system-ui;
        font-weight: 400;
		font-size: 57pt;
		letter-spacing: -0.25pt;
        line-height: 64pt;
	}

    .md-typescale-display-medium {
        font-family: "Roboto Flex", system-ui;
        font-weight: 400;
        font-size: 45pt;
        letter-spacing: 0;
        line-height: 52pt;
    }

    .md-typescale-display-small {
        font-family: "Roboto Flex", system-ui;
        font-weight: 400;
        font-size: 36pt;
        letter-spacing: 0;
        line-height: 44pt;
    }

    .md-typescale-headline-large {
        font-family: "Roboto Flex", system-ui;
        font-weight: 400;
        font-size: 32pt;
        letter-spacing: 0;
        line-height: 40pt;
    }

    .md-typescale-headline-medium {
        font-family: "Roboto Flex", system-ui;
        font-weight: 400;
        font-size: 28pt;
        letter-spacing: 0;
        line-height: 36pt;
    }

    .md-typescale-headline-small {
        font-family: "Roboto Flex", system-ui;
        font-weight: 400;
        font-size: 24pt;
        letter-spacing: 0;
        line-height: 32pt;
    }

    .md-typescale-title-large {
        font-family: "Roboto Flex", system-ui;
        font-weight: 400;
        font-size: 22pt;
        letter-spacing: 0;
        line-height: 28pt;
    }

    .md-typescale-title-medium {
        font-family: "Roboto Flex", system-ui;
        font-weight: 500;
        font-size: 16pt;
        letter-spacing: 0.15pt;
        line-height: 24pt;
    }

    .md-typescale-title-small {
        font-family: "Roboto Flex", system-ui;
        font-weight: 500;
        font-size: 14pt;
        letter-spacing: 0.1pt;
        line-height: 20pt;
    }

    .md-typescale-body-large {
        font-family: "Roboto Flex", system-ui;
        font-weight: 400;
        font-size: 16pt;
        letter-spacing: 0.5pt;
        line-height: 24pt;
    }

    .md-typescale-body-medium {
        font-family: "Roboto Flex", system-ui;
        font-weight: 400;
        font-size: 14pt;
        letter-spacing: 0.25pt;
        line-height: 20pt;
    }

    .md-typescale-body-small {
        font-family: "Roboto Flex", system-ui;
        font-weight: 400;
        font-size: 12pt;
        letter-spacing: 0.4pt;
        line-height: 16pt;
    }

    .md-typescale-label-large {
        font-family: "Roboto Flex", system-ui;
        font-weight: 500;
        font-size: 14pt;
        letter-spacing: 0.1pt;
        line-height: 20pt;
    }

    .md-typescale-label-medium {
        font-family: "Roboto Flex", system-ui;
        font-weight: 500;
        font-size: 12pt;
        letter-spacing: 0.5pt;
        line-height: 16pt;
    }

	.md-typescale-prominent {
        font-weight: 700 !important;
	}

    .md-typescale-label-small {
        font-family: "Roboto Flex", system-ui;
        font-weight: 500;
        font-size: 11pt;
        letter-spacing: 0.5pt;
        line-height: 16pt;
    }
</style>